package com.bbl.module_ads.remote;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

/**
 * V√≠ d·ª• s·ª≠ d·ª•ng RemoteConfig v·ªõi NativeConfig t·ª´ JSON
 * Minh h·ªça c√°ch load config t·ª´ file JSON cho native ads
 */
public class RemoteConfigExample {
    
    public static void main(String[] args) {
        System.out.println("=== BBL LibAds - Native Config JSON Demo ===\n");
        
        // Load config t·ª´ JSON string (gi·∫£ l·∫≠p)
        String jsonConfig = getJSONConfigString();
        
        // Validate JSON tr∆∞·ªõc khi load
        if (!JSONConfigLoader.validateConfig(jsonConfig)) {
            System.err.println("‚ùå JSON config kh√¥ng h·ª£p l·ªá!");
            return;
        }
        
        System.out.println("‚úÖ JSON config h·ª£p l·ªá, ƒëang load...");
        
        // Load RemoteConfig t·ª´ JSON
        RemoteConfig remoteConfig = JSONConfigLoader.loadFromJSONString(jsonConfig);
        
        // L·∫•y metadata
        Map<String, Object> metadata = JSONConfigLoader.getMetadata(jsonConfig);
        System.out.println("\nüìã Metadata:");
        for (Map.Entry<String, Object> entry : metadata.entrySet()) {
            System.out.println("  " + entry.getKey() + ": " + entry.getValue());
        }
        
        // === DEMO C√ÅC METHOD M·ªöI ===
        System.out.println("\n=== Demo t√¨m ki·∫øm theo Ad Unit ID ===");
        
        // 1. T√¨m NativeConfig theo ad_unit_id
        String testAdUnitId = "ca-app-pub-3940256099942544/2247696110";
        NativeConfig foundConfig = remoteConfig.getNativeConfigByAdUnitId(testAdUnitId);
        if (foundConfig != null) {
            System.out.println("‚úì T√¨m th·∫•y config cho ad_unit_id: " + testAdUnitId);
            System.out.println("  Layout: " + foundConfig.getLayout());
            System.out.println("  Background: " + foundConfig.getBackgroundColor());
            System.out.println("  CTA Color: " + foundConfig.getCtaColor());
            System.out.println("  Show: " + foundConfig.isShow());
        } else {
            System.out.println("‚úó Kh√¥ng t√¨m th·∫•y config cho ad_unit_id: " + testAdUnitId);
        }
        
        // 2. L·∫•y t·∫•t c·∫£ config c√≥ c√πng ad_unit_id
        List<NativeConfig> allConfigsWithSameId = remoteConfig.getAllNativeConfigsByAdUnitId(testAdUnitId);
        System.out.println("\nS·ªë l∆∞·ª£ng config c√≥ c√πng ad_unit_id '" + testAdUnitId + "': " + allConfigsWithSameId.size());
        for (int i = 0; i < allConfigsWithSameId.size(); i++) {
            NativeConfig config = allConfigsWithSameId.get(i);
            System.out.println("  Config " + (i + 1) + ": " + config.getLayout() + " - " + config.getBackgroundColor());
        }
        
        // 3. L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ config (bao g·ªìm group v√† config name)
        Map<String, Object> configInfo = remoteConfig.getNativeConfigInfoByAdUnitId(testAdUnitId);
        if (!configInfo.isEmpty()) {
            System.out.println("\nTh√¥ng tin chi ti·∫øt config:");
            System.out.println("  Group: " + configInfo.get("groupName"));
            System.out.println("  Config Name: " + configInfo.get("configName"));
            NativeConfig config = (NativeConfig) configInfo.get("nativeConfig");
            System.out.println("  Layout: " + config.getLayout());
        }
        
        // 4. Ki·ªÉm tra t·ªìn t·∫°i v√† ƒë·∫øm
        boolean hasConfig = remoteConfig.hasNativeConfigWithAdUnitId(testAdUnitId);
        int configCount = remoteConfig.countNativeConfigsByAdUnitId(testAdUnitId);
        System.out.println("\nKi·ªÉm tra t·ªìn t·∫°i: " + hasConfig);
        System.out.println("S·ªë l∆∞·ª£ng config: " + configCount);
        
        // 5. Test v·ªõi ad_unit_id kh√¥ng t·ªìn t·∫°i
        String nonExistentId = "ca-app-pub-9999999999999999/9999999999";
        NativeConfig nonExistentConfig = remoteConfig.getNativeConfigByAdUnitId(nonExistentId);
        System.out.println("\nTest v·ªõi ad_unit_id kh√¥ng t·ªìn t·∫°i: " + (nonExistentConfig == null ? "‚úì Kh√¥ng t√¨m th·∫•y" : "‚úó T√¨m th·∫•y"));
        
        // === DEMO S·ª¨ D·ª§NG CONFIG T·ª™ JSON ===
        System.out.println("\n=== Demo s·ª≠ d·ª•ng Config t·ª´ JSON ===");
        
        // Demo hi·ªÉn th·ªã ads v·ªõi config t·ª´ JSON
        demoShowAdsFromJSON(remoteConfig);
        
        // In th√¥ng tin t·ªïng quan
        System.out.println("\n=== Th√¥ng tin RemoteConfig ===");
        System.out.println("S·ªë l∆∞·ª£ng group: " + remoteConfig.getGroupCount());
        System.out.println("Danh s√°ch group: " + String.join(", ", remoteConfig.getAllGroupNames()));
        
        // In th√¥ng tin LayoutMapper
        System.out.println("\n=== Th√¥ng tin LayoutMapper ===");
        System.out.println("S·ªë l∆∞·ª£ng layout mapping: " + LayoutMapper.getMappingCount());
        System.out.println("Danh s√°ch layout ID: " + String.join(", ", LayoutMapper.getAllLayoutIds()));
        
        // In th√¥ng tin t·ª´ng group
        for (String groupName : remoteConfig.getAllGroupNames()) {
            GroupNativeConfig group = remoteConfig.getGroupNativeConfig(groupName);
            System.out.println("\nGroup: " + groupName);
            System.out.println("S·ªë l∆∞·ª£ng config: " + group.getConfigCount());
            System.out.println("Danh s√°ch config: " + String.join(", ", group.getAllConfigNames()));
            
            // In chi ti·∫øt t·ª´ng config trong group
            for (String configName : group.getAllConfigNames()) {
                NativeConfig config = group.getNativeConfig(configName);
                int layoutResource = LayoutMapper.getLayoutResource(config.getLayout());
                System.out.println("  - " + configName + ": layout=" + config.getLayout() + 
                                 " (resource=" + layoutResource + "), show=" + config.isShow());
            }
        }
    }
    
    /**
     * Demo hi·ªÉn th·ªã ads v·ªõi config t·ª´ JSON
     */
    private static void demoShowAdsFromJSON(RemoteConfig remoteConfig) {
        System.out.println("\nüéØ Demo hi·ªÉn th·ªã ads v·ªõi config t·ª´ JSON:");
        
        // L·∫•y t·∫•t c·∫£ config c√≥ isShow = true
        for (String groupName : remoteConfig.getAllGroupNames()) {
            GroupNativeConfig group = remoteConfig.getGroupNativeConfig(groupName);
            
            for (String configName : group.getAllConfigNames()) {
                NativeConfig config = group.getNativeConfig(configName);
                
                if (config.isShow()) {
                    System.out.println("\nüì± Hi·ªÉn th·ªã " + groupName + "/" + configName + ":");
                    System.out.println("  Ad Unit ID: " + config.getIdAds());
                    System.out.println("  Layout: " + config.getLayout());
                    
                    int layoutResource = LayoutMapper.getLayoutResource(config.getLayout());
                    System.out.println("  Layout Resource: " + layoutResource);
                    
                    System.out.println("  Background: " + config.getBackgroundColor());
                    System.out.println("  CTA Color: " + config.getCtaColor());
                    System.out.println("  Stroke: " + config.getStroke());
                    
                    // Gi·∫£ l·∫≠p hi·ªÉn th·ªã ads
                    System.out.println("  ‚úÖ Ads ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã v·ªõi config n√†y!");
                } else {
                    System.out.println("\n‚è∏Ô∏è  B·ªè qua " + groupName + "/" + configName + " (isShow = false)");
                }
            }
        }
    }
    
    /**
     * L·∫•y JSON config string (gi·∫£ l·∫≠p ƒë·ªçc t·ª´ file)
     * Trong th·ª±c t·∫ø s·∫Ω ƒë·ªçc t·ª´ res/raw/native_ads_config.json
     */
    private static String getJSONConfigString() {
        return "{\n" +
                "  \"native_ads_config\": {\n" +
                "    \"banner_group\": {\n" +
                "      \"banner_small\": {\n" +
                "        \"idAds\": \"ca-app-pub-3940256099942544/2247696110\",\n" +
                "        \"layout\": \"ads_native_banner_layout\",\n" +
                "        \"backgroundColor\": \"#FFFFFF\",\n" +
                "        \"ctaColor\": \"#FF5722\",\n" +
                "        \"isShow\": true,\n" +
                "        \"stroke\": \"#E0E0E0\"\n" +
                "      },\n" +
                "      \"banner_large\": {\n" +
                "        \"idAds\": \"ca-app-pub-3940256099942544/2247696111\",\n" +
                "        \"layout\": \"ads_native_banner_layout_2\",\n" +
                "        \"backgroundColor\": \"#F5F5F5\",\n" +
                "        \"ctaColor\": \"#2196F3\",\n" +
                "        \"isShow\": true,\n" +
                "        \"stroke\": \"#CCCCCC\"\n" +
                "      }\n" +
                "    },\n" +
                "    \"interstitial_group\": {\n" +
                "      \"interstitial_fullscreen\": {\n" +
                "        \"idAds\": \"ca-app-pub-3940256099942544/1033173712\",\n" +
                "        \"layout\": \"ads_native_interstitial_layout\",\n" +
                "        \"backgroundColor\": \"#000000\",\n" +
                "        \"ctaColor\": \"#FFC107\",\n" +
                "        \"isShow\": true,\n" +
                "        \"stroke\": \"#333333\"\n" +
                "      }\n" +
                "    },\n" +
                "    \"fullscreen_group\": {\n" +
                "      \"fullscreen_1\": {\n" +
                "        \"idAds\": \"ca-app-pub-3940256099942544/1043173714\",\n" +
                "        \"layout\": \"ads_native_fullscreen1_layout\",\n" +
                "        \"backgroundColor\": \"#2C3E50\",\n" +
                "        \"ctaColor\": \"#E74C3C\",\n" +
                "        \"isShow\": true,\n" +
                "        \"stroke\": \"#34495E\"\n" +
                "      },\n" +
                "      \"fullscreen_2\": {\n" +
                "        \"idAds\": \"ca-app-pub-3940256099942544/1043173715\",\n" +
                "        \"layout\": \"ads_native_fullscreen2_layout\",\n" +
                "        \"backgroundColor\": \"#8E44AD\",\n" +
                "        \"ctaColor\": \"#F39C12\",\n" +
                "        \"isShow\": false,\n" +
                "        \"stroke\": \"#9B59B6\"\n" +
                "      }\n" +
                "    }\n" +
                "  },\n" +
                "  \"layout_mappings\": {\n" +
                "    \"ads_native_banner_layout\": \"R.layout.ads_native_banner_layout\",\n" +
                "    \"ads_native_banner_layout_2\": \"R.layout.ads_native_banner_layout_2\",\n" +
                "    \"ads_native_interstitial_layout\": \"R.layout.ads_native_interstitial_layout\",\n" +
                "    \"ads_native_fullscreen1_layout\": \"R.layout.ads_native_fullscreen1_layout\",\n" +
                "    \"ads_native_fullscreen2_layout\": \"R.layout.ads_native_fullscreen2_layout\"\n" +
                "  },\n" +
                "  \"metadata\": {\n" +
                "    \"version\": \"1.0\",\n" +
                "    \"last_updated\": \"2024-01-15\",\n" +
                "    \"description\": \"Native Ads Configuration for BBL LibAds\",\n" +
                "    \"total_groups\": 3,\n" +
                "    \"total_configs\": 5\n" +
                "  }\n" +
                "}";
    }
}
